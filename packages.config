<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Antlr" version="3.4.1.9004" targetFramework="net45" />
  <package id="bootstrap" version="3.0.0" targetFramework="net45" />
  <package id="EntityFramework" version="6.0.0" targetFramework="net45" />
  <package id="jQuery" version="1.10.2" targetFramework="net45" />
  <package id="jQuery.Validation" version="1.11.1" targetFramework="net45" />
  <package id="Microsoft.AspNet.Identity.Core" version="1.0.0" targetFramework="net45" />
  <package id="Microsoft.AspNet.Identity.EntityFramework" version="1.0.0" targetFramework="net45" />
  <package id="Microsoft.AspNet.Identity.Owin" version="1.0.0" targetFramework="net45" />
  <package id="Microsoft.AspNet.Mvc" version="5.0.0" targetFramework="net45" />
  <package id="Microsoft.AspNet.Razor" version="3.0.0" targetFramework="net45" />
  <package id="Microsoft.AspNet.Web.Optimization" version="1.1.1" targetFramework="net45" />
  <package id="Microsoft.AspNet.WebPages" version="3.0.0" targetFramework="net45" />
  <package id="Microsoft.jQuery.Unobtrusive.Validation" version="3.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Host.SystemWeb" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security.Cookies" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security.Facebook" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security.Google" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security.MicrosoftAccount" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security.OAuth" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Owin.Security.Twitter" version="2.0.0" targetFramework="net45" />
  <package id="Microsoft.Web.Infrastructure" version="1.0.0.0" targetFramework="net45" />
  <package id="Modernizr" version="2.6.2" targetFramework="net45" />
  <package id="Newtonsoft.Json" version="5.0.6" targetFramework="net45" />
  <package id="Owin" version="1.0" targetFramework="net45" />
  <package id="Respond" version="1.2.0" targetFramework="net45" />
  <package id="WebGrease" version="1.5.2" targetFramework="net45" />
</packages>



Sp For Insert Update Delete:
CREATE PROCEDURE [dbo].[spEmployeeCRUD]
	(
		@EmployeeId int=null,
		@FirstName varchar(50) = null,
		@LastName varchar(50) = null,
		@Salary varchar(50) = null,
		@Gender char(1)=null,
		@Action varchar(50) = null
	)
AS
	begin
	if (@Action = 'InsertUpdate')
		begin
		if (@EmployeeId = null or @EmployeeId = 0)
			begin
				insert into TblEmployee1(FirstName,LastName,Salary,Gender) values (@FirstName,@LastName,@Salary,@Gender) 
			end
		else
			begin
				update TblEmployee1 set
				FirstName = @FirstName,
				LastName = @LastName,
				Salary = @Salary,
				Gender = @Gender
				where EmployeeId = @EmployeeId 
			end
		end
	else if(@Action = 'Delete')
		begin
			delete from TblEmployee1 where EmployeeId = @EmployeeId
		end		
	else if(@Action = 'Get')
		begin
			select * from TblEmployee1
		end
	

Empoloyye Controller 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Web.WebPages.Html;
using PagedList;
using System.IO;
using iTextSharp.text;
using System.Drawing.Printing;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using Microsoft.Reporting.WebForms;
using System.Web.UI.WebControls;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Web;

namespace CRUDADO.Controllers
{
    public class EmployeeController : Controller
    {
        public SqlConnection con;
        public void connection()
        {
            string cnstr;
            cnstr = ConfigurationManager.ConnectionStrings["SalesERPDAL"].ToString();
            con = new SqlConnection(cnstr);
        }
        // GET: Employee
        EmpRepository er = new EmpRepository();
        [HttpGet]
        public ActionResult AddEmployee()
        {
            return View();
        }
        [HttpPost]
        public ActionResult AddEmployee(Employee e)
        {
            if (er.AddEmployeeWithBase(e))
            {
                ViewBag.message = "Add Successfully";
            }
            return RedirectToAction("GetAll", "Employee");
        }

        public ActionResult GetAll(string Sorting_Order,string Search,int? page)
        {
            int pageNo = 1;
            int pageSize = 10;
            pageNo = page.HasValue ? Convert.ToInt32(page) : 1;
            //Search = Request.Form["search"];
            ViewBag.SortingFirstName = string.IsNullOrWhiteSpace(Sorting_Order) ? "FirstName_Desc" : "";
            //ViewBag.SortingFirstName = Sorting_Order == "FirstName" ? "FirstName_Desc" : "FirstName";
            ViewBag.SortingLastName = Sorting_Order == "LastName" ? "LastName_Desc" : "LastName";
            //ViewBag.SortingSalary = Sorting_Order == "Salary" ? "Salary_Desc" : "Salary";
            //IPagedList<Employee> EP = null;
            List<Employee> emp;
            //Employee empList = new Employee();
            ViewBag.EmployeeList = FillEmployeeName();
            emp = er.GetAllWithBase().ToList();
            if (Search != null && Search != "")
            {
                emp = emp.Where(c => c.FirstName.ToUpper().Contains(Search.ToUpper()) || c.LastName.ToUpper().Contains(Search.ToUpper())
                                        || c.Salary.ToString().Contains(Search)).ToList();
            }
            switch (Sorting_Order)
            {
                //case "FirstName":
                //   emp = er.GetAll().OrderBy(x => x.FirstName).ToList();
                //    break;
                case "FirstName_Desc":
                    emp = emp.OrderByDescending(x => x.FirstName).ToList();
                    break;
                case "LastName":
                    emp = emp.OrderBy(x => x.LastName).ToList();
                    break;
                case "LastName_Desc":
                    emp = emp.OrderByDescending(x => x.LastName).ToList();
                    break;
                default:
                    emp = emp.OrderBy(x => x.FirstName).ToList();
                    break;
            }
            //return View(emp.Skip((pageNo - 1) * pageSize).Take(pageSize));
            return View(emp);
            //EP = emp.ToPagedList(pageNo, pageSize);
            //return View(EP);
            //return View();
    }

        private List<System.Web.Mvc.SelectListItem> FillEmployeeName()
        {
            List<System.Web.Mvc.SelectListItem> EmpName = new List<System.Web.Mvc.SelectListItem>();
            EmpName = er.EmployeeName();
            return EmpName;
        }

        [HttpGet]
        public ActionResult EditEmployee(int id)
        {
            return View(er.GetAllWithBase().Find(x=> x.EmployeeId == id));
        }

        [HttpPost]
        public ActionResult EditEmployee(Employee e)
        {
            if (er.UpdateEmployeeWithBase(e))
            {
                ViewBag.message = "Update Successfully";
            }
            return RedirectToAction("GetAll", "Employee");
        }

        public ActionResult Delete(int id)
        {
            if (er.DeleteEmployeeWithBase(id))
            {
                ViewBag.message = "Delete Successfully";
            }
            return RedirectToAction("GetAll","Employee");
        }

        public ActionResult Index()
        {
            return View();
        }
        //public JsonResult List()
        //{
        //    //var draw = Request.Form.GetValues("draw").FirstOrDefault();
        //    List<Employee2> emp = new List<Employee2>();
        //    emp = er.GetAllWithBase().ToList();
        //    return Json(new {data= emp}, JsonRequestBehavior.AllowGet);
        //}

        //public ActionResult AddEmp(Employee e)
        //{
        //    if (e.EmployeeId < 0)
        //    {
        //        er.AddEmployeeWithBase(e);
        //    }
        //    else
        //    {
        //        er.UpdateEmployeeWithBase(e);
        //    }
        //    return Json("Success", JsonRequestBehavior.AllowGet);
        //}

        //public JsonResult GetById(int id)
        //{
        //    return Json(er.GetAll().Find(c => c.EmployeeId == id), JsonRequestBehavior.AllowGet);
        //} 
        [HttpPost]
        [ValidateInput(false)]
        public FileResult Export(string GridExport)
        {
            StringReader sr = null;
            Document pdfDoc = null;
            PdfWriter writter = null;
            try
            {
                using (MemoryStream stream = new MemoryStream())
                {
                    sr = new StringReader(GridExport);
                    pdfDoc = new Document(PageSize.A4, 10f, 10f, 100f, 0f);
                    writter = PdfWriter.GetInstance(pdfDoc, stream);
                    pdfDoc.Open();
                    XMLWorkerHelper.GetInstance().ParseXHtml(writter, pdfDoc, sr);
                    pdfDoc.Close();
                    return File(stream.ToArray(), "application/pdf", "Grid.pdf");
                }
            }
            finally
            {
                sr.Dispose();
                pdfDoc.Dispose();
                writter.Dispose();
            }           
        }

        DataSet ds = new DataSet();
        public ActionResult Reports()
        {
            ReportViewer rptViewer = new ReportViewer();
            rptViewer.ProcessingMode = ProcessingMode.Local;
            rptViewer.SizeToReportContent = true;
            rptViewer.ZoomMode = ZoomMode.PageWidth;
            rptViewer.Width = Unit.Percentage(99);
            rptViewer.Height = Unit.Pixel(1000);
            rptViewer.AsyncRendering = true;
            connection();
            SqlDataAdapter da = new SqlDataAdapter("select * from TblEmployee1", con);
            da.Fill(ds);
            rptViewer.LocalReport.ReportPath = ConfigurationManager.AppSettings["ReportPath"].ToString();
            rptViewer.LocalReport.DataSources.Add(new ReportDataSource("DataSet1", ds.Tables[0]));
            ////rptViewer.ServerReport.ReportServerUrl = new Uri("http://localhost/ReportServer");
            //rptViewer.ServerReport.ReportPath = ConfigurationManager.AppSettings["ReportPath"].ToString();
            ViewBag.ReportViewer = rptViewer;
            return View();
        }

        public ActionResult UploadFiles()
        {
            return View();
        }
        [HttpPost]
        public ActionResult UploadFiles(HttpPostedFileBase[] files)
        {
            if (ModelState.IsValid)
            {
                foreach(HttpPostedFileBase file in files)
                {
                    if(file!=null){
                        var inputFileName = Path.GetFileName(file.FileName);
                        int a=1;
                        var serverPath = "";
                        switch (a)
                        {
                            case 1:
                                serverPath = Path.Combine(Server.MapPath("~/UploadFiles/") + inputFileName);
                                break;
                            case 2:
                                serverPath = Path.Combine(Server.MapPath("~/UploadFiles2/") + inputFileName);
                                break;
                            default:
                                break;
                        }                        
                        file.SaveAs(serverPath);
                    }
                    //ViewBag.Image = Directory.EnumerateFiles(Server.MapPath("~/UploadFiles/")).Select(m => "~/UploadFiles/" + Path.GetFileName(m));
                }               
            }           
            return RedirectToAction("AllImage","Employee");
        }

        public ActionResult AllImage(string type="M")
        {
            int i = 1;
            string first = "~/UploadFiles/";
            string second = "~/UploadFiles2/";
            ImageViewModel model = null;
            switch (type)
            {
                case "M":
                    model = new ImageViewModel()
                    {
                        Image = Directory.EnumerateFiles(Server.MapPath(first)).Select(m => first + Path.GetFileName(m))
                    };
                    break;
                case "W":
                    model = new ImageViewModel()
                    {
                        Image = Directory.EnumerateFiles(Server.MapPath(second)).Select(m => second + Path.GetFileName(m))
                    };
                    break;
                default:
                    break;
            }           
            return View(model);
        }



    }
}
              
 Employee Repository Class
 using Controls;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Web.Mvc;

namespace CRUDADO
{
    public class EmpRepository : DbBase
    {
        //DbBase db = new DbBase();
        public SqlConnection con;
        public void connection()
        {
            string cnstr;
            cnstr = ConfigurationManager.ConnectionStrings["SalesERPDAL"].ToString();
            con = new SqlConnection(cnstr);
        }

        //public List<Employee> GetAll()
        //{
        //    connection();
        //    SqlCommand cmd = new SqlCommand("spEmployeeCRUD", con);
        //    cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //    cmd.Parameters.AddWithValue("@Action", "Get");
        //    SqlDataAdapter da = new SqlDataAdapter(cmd);
        //    DataTable dt = new DataTable();
        //    List<Employee> emp = new List<Employee>();
        //    con.Open();
        //    da.Fill(dt);
        //    con.Close();
        //    foreach(DataRow dr in dt.Rows)
        //    {
        //        emp.Add(
        //            new Employee
        //            {
        //                EmployeeId = Convert.ToInt32(dr["EmployeeId"]),
        //                FirstName = Convert.ToString(dr["FirstName"]),
        //                LastName = Convert.ToString(dr["LastName"]),
        //                Salary = Convert.ToInt32(dr["Salary"])                        
        //                }
        //            );
        //    }
        //    return emp;
        //}

        public List<Employee> GetAllWithBase()
        {
            var sqlParam = new List<Tuple<string, object>>();
            DataTable dtTemp = new DataTable();
            sqlParam.Add(new Tuple<string, object>("@Action", "Get"));
            dtTemp = RetriveRecordStoredProcedure("spEmployeeCRUD", sqlParam, dtTemp);
            /*List<Employee> emp = new List<Employee>();*/
            List<Employee> emp = new List<Employee>();
            if (dtTemp.Rows.Count > 0)
            {
                foreach (DataRow dr in dtTemp.Rows)
                {
                    emp.Add(new Employee
                    {
                        EmployeeId = Convert.ToInt32(dr["EmployeeId"]),
                        FirstName = Convert.ToString(dr["FirstName"]),
                        LastName = Convert.ToString(dr["LastName"]),
                        Salary = Convert.ToInt32(dr["Salary"])
                    });
                }
            }
            return emp;
        }


        //public bool AddEmployee(Employee e)
        //{
        //    connection();
        //    SqlCommand cmd = new SqlCommand("spEmployeeCRUD", con);
        //    cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //    cmd.Parameters.AddWithValue("@EmployeeId", e.EmployeeId);
        //    cmd.Parameters.AddWithValue("@FirstName", e.FirstName);
        //    cmd.Parameters.AddWithValue("@LastName", e.LastName);
        //    cmd.Parameters.AddWithValue("@Salary", e.Salary);
        //    cmd.Parameters.AddWithValue("@Gender", e.Gender);
        //    cmd.Parameters.AddWithValue("@Action", "InsertUpdate");
        //    con.Open();
        //    int a = cmd.ExecuteNonQuery();
        //    con.Close();
        //    if (a >= 1)
        //        return true;
        //    else
        //        return false;            
        //}

        public bool AddEmployeeWithBase(Employee e)
        {
            var sqlParam = new List<Tuple<string, object>>();
            sqlParam.Add(new Tuple<string, object>("@EmployeeId", e.EmployeeId));
            sqlParam.Add(new Tuple<string, object>("@FirstName", e.FirstName));
            sqlParam.Add(new Tuple<string, object>("@LastName", e.LastName));
            sqlParam.Add(new Tuple<string, object>("@Salary", e.Salary));
            sqlParam.Add(new Tuple<string, object>("@Gender", e.Gender));
            sqlParam.Add(new Tuple<string, object>("@Action", "InsertUpdate"));
            bool i = ExecuteProcedure("spEmployeeCRUD", sqlParam);
            if (i)
                return true;
            else
                return false;
        }

        //public bool UpdateEmployee(Employee e)
        //{
        //    connection();
        //    SqlCommand cmd = new SqlCommand("spEmployeeCRUD", con);
        //    cmd.CommandType = CommandType.StoredProcedure;            
        //    cmd.Parameters.AddWithValue("@EmployeeId", e.EmployeeId);
        //    cmd.Parameters.AddWithValue("@FirstName", e.FirstName);
        //    cmd.Parameters.AddWithValue("@LastName", e.LastName);
        //    cmd.Parameters.AddWithValue("@Salary", e.Salary);
        //    cmd.Parameters.AddWithValue("@Action", "InsertUpdate");
        //    con.Open();
        //    int i = cmd.ExecuteNonQuery();
        //    con.Close();
        //    if (i >= 1)
        //        return true;
        //    else
        //        return false;
        //}

        public bool UpdateEmployeeWithBase(Employee e)
        {
            var SqlParam = new List<Tuple<string, object>>();
            SqlParam.Add(new Tuple<string, object>("@EmployeeId", e.EmployeeId));
            SqlParam.Add(new Tuple<string, object>("@FirstName", e.FirstName));
            SqlParam.Add(new Tuple<string, object>("@LastName", e.LastName));
            SqlParam.Add(new Tuple<string, object>("@Salary", e.Salary));
            SqlParam.Add(new Tuple<string, object>("@Action", "InsertUpdate"));
            bool i = ExecuteProcedure("spEmployeeCRUD", SqlParam);
            if (i)
                return true;
            else
                return false;
        }

        //public bool DeleteEmployee(int EmployeeId)
        //{
        //    connection();
        //    SqlCommand cmd = new SqlCommand("spEmployeeCRUD", con);
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    cmd.Parameters.AddWithValue("@EmployeeId",EmployeeId);
        //    cmd.Parameters.AddWithValue("@Action", "Delete");
        //    con.Open();
        //    int i = cmd.ExecuteNonQuery();
        //    con.Close();
        //    if (i >= 1)
        //        return true;
        //    else
        //        return false;
        //}

        public bool DeleteEmployeeWithBase(int EmployeeId)
        {
            var SqlParam = new List<Tuple<string, object>>();
            SqlParam.Add(new Tuple<string, object>("@EmployeeId", EmployeeId));
            SqlParam.Add(new Tuple<string, object>("@Action", "Delete"));
            bool i = ExecuteProcedure("spEmployeeCRUD", SqlParam);
            if (i)
                return true;
            else
                return false;
        }
        public List<SelectListItem> EmployeeName()
        {
            //string sql = "select FirstName,EmployeeId from TblEmployee";
            List<SelectListItem> EmpName = new List<SelectListItem>();
            connection();
            SqlCommand cmd = new SqlCommand("spEmployeeList", con);
            //SqlCommand cmd = new SqlCommand(sql, con);
            DataTable dt = new DataTable();
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            //cmd.CommandType = CommandType.StoredProcedure;
            con.Open();
            //using (SqlDataReader dr = cmd.ExecuteReader()) {    
            //    while (dr.Read())
            //    {
            //        EmpName.Add(new SelectListItem
            //        {
            //            Text = dr["FirstName"].ToString(),
            //            Value = dr["EmployeeId"].ToString(),
            //        });
            //    }
            //}
            foreach (DataRow dr in dt.Rows)
            {
                EmpName.Add(new SelectListItem
                {
                    Text = Convert.ToString(dr["FirstName"]),
                    Value = Convert.ToString(dr["EmployeeId"])
                });
            }
            con.Close();
            return EmpName;
        }


        public List<CustomerViewModel> GetAllWithCombo()
        {
            connection();
            SqlCommand cmd = new SqlCommand("spEmployeeCRUDCombo", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Action", "Get");
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            List<CustomerViewModel> emp = new List<CustomerViewModel>();
            con.Open();
            da.Fill(dt);
            con.Close();
            foreach (DataRow dr in dt.Rows)
            {
                emp.Add(
                    new CustomerViewModel
                    {
                        id = Convert.ToInt32(dr["Id"]),
                        Name = Convert.ToString(dr["Name"]),
                        salary = Convert.ToInt32(dr["Salary"]),
                        CityName = Convert.ToString(dr["CityName"]),
                        cid = (Convert.ToInt32(dr["CID"]))
                    });
            }
            return emp;
        }

        //public List<Customer> GetAllWithCombo2()
        //{
        //    connection();
        //    SqlCommand cmd = new SqlCommand("spEmployeeCRUDCombo", con);
        //    cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //    cmd.Parameters.AddWithValue("@Action", "Get");
        //    SqlDataAdapter da = new SqlDataAdapter(cmd);
        //    DataTable dt = new DataTable();
        //    List<Customer> emp = new List<Customer>();
        //    con.Open();
        //    da.Fill(dt);
        //    con.Close();
        //    foreach (DataRow dr in dt.Rows)
        //    {
        //        emp.Add(
        //            new Customer
        //            {
        //                id = Convert.ToInt32(dr["Id"]),
        //                Name = Convert.ToString(dr["Name"]),
        //                salary = Convert.ToInt32(dr["Salary"]),
        //                cid = (Convert.ToInt32(dr["CID"]))
        //            });
        //    }
        //    return emp;
        //}
        public List<City> GetCity()
        {
            connection();
            SqlCommand cmd = new SqlCommand("spEmployeeCRUDCombo", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Action", "City");
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            List<City> emp = new List<City>();
            con.Open();
            da.Fill(dt);
            con.Close();
            foreach (DataRow dr in dt.Rows)
            {
                emp.Add(
                    new City
                    {
                        cid = Convert.ToInt32(dr["Id"]),
                        CityName = Convert.ToString(dr["CityName"])
                    });
            }
            return emp;
        }


        //public bool AddCustomer(Customer e)
        //{
        //    connection();
        //    SqlCommand cmd = new SqlCommand("spEmployeeCRUDCombo", con);
        //    cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //    cmd.Parameters.AddWithValue("@Id", e.id);
        //    cmd.Parameters.AddWithValue("@Name", e.Name);
        //    cmd.Parameters.AddWithValue("@Salary", e.salary);
        //    cmd.Parameters.AddWithValue("@cid", e.cid);
        //    cmd.Parameters.AddWithValue("@Action", "InsertUpdate");
        //    con.Open();
        //    int a = cmd.ExecuteNonQuery();
        //    con.Close();
        //    if (a >= 1)
        //        return true;
        //    else
        //        return false;
        //}

        public List<CustomerDataTable> GetAllDataTable(int PageNo,int PageSize)
        {
            connection();
            SqlCommand cmd = new SqlCommand("spEmployeeCRUDCombo", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@PageNo", PageNo);
            cmd.Parameters.AddWithValue("@PageSize", PageSize);
            cmd.Parameters.AddWithValue("@Action", "CustomerDataTable");            
            List<CustomerDataTable> emp = new List<CustomerDataTable>();
            con.Open();                        
            SqlDataReader dr = cmd.ExecuteReader();            
            while (dr.Read())
            {
                emp.Add(
                    new CustomerDataTable
                    {
                        CustomerID = Convert.ToInt32(dr["CustomerID"]),
                        CompanyName = Convert.ToString(dr["CompanyName"]),
                        ContactName = Convert.ToString(dr["ContactName"]),
                        ContactTitle = Convert.ToString(dr["ContactTitle"]),
                        Address = Convert.ToString(dr["Address"]),
                        Region = Convert.ToString(dr["Region"]),
                        PostalCode = Convert.ToString(dr["PostalCode"]),
                        Country = Convert.ToString(dr["Country"]),
                        Phone = Convert.ToString(dr["Phone"]),
                        Fax = Convert.ToString(dr["Fax"])     
                    });                
            }
            return emp;            
        }
        
        public bool deleteRows(string SelectedIdFinalrows)
        {            
            connection();
            SqlCommand cmd = new SqlCommand("DeleteMultipleRows", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@ID_ARRAY", SelectedIdFinalrows);                                        
            con.Open();
            int a = cmd.ExecuteNonQuery();
            con.Close();
            if (a >= 1)
                return true;
            else
                return false;
        }

        public bool DeleteSingle(int id)
        {
            connection();
            SqlCommand cmd = new SqlCommand("spEmployeeCRUDCombo", con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@CustomerId", id);
            cmd.Parameters.AddWithValue("@Action", "Delete");
            con.Open();
            int i = cmd.ExecuteNonQuery();
            con.Close();
            if (i >= 1)
                return true;
            else
                return false;
        }

    }
}
              
              
  Views :
       GetALL()
       @model IEnumerable<CRUDADO.Employee>
@*@using PagedList.Mvc
@model PagedList.IPagedList<CRUDADO.Employee>*@
<p>
    @Html.ActionLink("Create New", "AddEmployee")
</p>
@using (Html.BeginForm())
{
    <input type="search" name="search" id="search" value="" />
    <input type="submit" name="Submit" value="Search" />
}
@*@Html.DropDownListFor("EmployeeName", new SelectList(ViewBag.EmployeeList))*@
@using (Html.BeginForm("Export", "Employee", FormMethod.Post))
{
    <input type="hidden" name="GridExport" />
    <input type="submit" id="btnSubmit" value="Export" />
}
<div id="Grid">
    <table class="table">
        <tr>
            <th>
                @Html.ActionLink("FirstName", "GetAll", new { Sorting_Order = ViewBag.SortingFirstName })
                @*@Html.DisplayNameFor(model => model.FirstName)*@
            </th>
            <th>
                @Html.ActionLink("LastName", "GetAll", new { Sorting_Order = ViewBag.SortingLastName })
                @*@Html.DisplayNameFor(model => model.LastName)*@
            </th>
            <th>
                @*@Html.ActionLink("Salary", "GetAll", new { Sorting_Order = ViewBag.SortingSalary })*@
                Salary
            </th>
            <th>
                Gender
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            @*@Html.HiddenFor(modelItem => item.EmployeeId);*@
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Salary)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.ActionLink("Edit", "EditEmployee", new { id = item.EmployeeId }) |
                    @*@Html.ActionLink("Details", "Details", new { id=item.EmployeeId }) |*@
                    @Html.ActionLink("Delete", "Delete", new { id = item.EmployeeId })
                </td>
                @*<td>
                        @Html.DropDownListFor(x => item.EmployeeName, (IEnumerable<SelectListItem>)ViewBag.EmployeeList)
                    </td>*@
            </tr>
        }
    </table>
</div>

  
  Edit Employee:
  @model CRUDADO.Employee

@using (Html.BeginForm("EditEmployee", "Employee"))
{
    @Html.HiddenFor(x => x.EmployeeId);
    <h3>FirstName : </h3> @Html.TextBoxFor(x => x.FirstName);
    <h3>LastName : </h3> @Html.TextBoxFor(x => x.LastName);
    <h3>SalaryName : </h3> @Html.TextBoxFor(x => x.Salary);<br />
    <input type="submit" name="submit" value="Save" />
}

	
ShaliGram Practicle
Class
1) using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace CRUDADO.Models
{
    public class Item
    {
        public int ItemId { get; set; }
        public string ItemName { get; set; }
        public int ItemPrice { get; set; }
    }
}
	
2)using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace CRUDADO.Models
{
    public class User
    {
        public int UserID{ get; set; }
        public string UserName { get; set; }
    }
}

3)using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace CRUDADO.Models
{
    public class ItemCore
    {
        public int ItemId{ get; set; }
        public string ItemName { get; set; }
        public int Qty { get; set; }
        public int Price { get; set; }
        public int Total { get; set; }
    }
}
	
Controller:
	using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace CRUDADO.Controllers
{
    public class RestauController : Controller
    {
        RestaurantRepository rr = new RestaurantRepository();        
        public ActionResult Index()
        {
            var result = rr.GetItem().ToList();
            ViewBag.Total = result.Sum(x => x.Total);
            ViewBag.IncludeGST = ((Convert.ToInt32(ViewBag.Total)*18)/100) + Convert.ToInt32(ViewBag.Total);
            return View(result);           
        }        
        public JsonResult GetUser()
        {
            var UserList = rr.GetAllUser().ToList();
            return Json(UserList, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetItem()
        {
            var UserList = rr.GetAllItem().ToList();
            return Json(UserList, JsonRequestBehavior.AllowGet);
        }        
        public JsonResult PostItem(string ItemName)
        {
            if (rr.AddItem(ItemName))
            {
                return Json("OK", JsonRequestBehavior.AllowGet);
            }
            return Json("Bad", JsonRequestBehavior.AllowGet);
        }
        public JsonResult ValidateCoupon(string txtCoupon,int TotalAmmount)
        {
            if (rr.IsValidCoupon(txtCoupon,TotalAmmount))
            {
                return Json("OK", JsonRequestBehavior.AllowGet);
            }
            return Json("Bad", JsonRequestBehavior.AllowGet);
        }
        public JsonResult PlaceOrder(int UserId,int TotalAmmount,int WithGST,string Coupon)
        {
            if (rr.PlaceOrder(UserId, TotalAmmount, WithGST, Coupon))
            {
                return Json("OK", JsonRequestBehavior.AllowGet);
            }
            return Json("Bad", JsonRequestBehavior.AllowGet);
        }
    }
}
	
View :
@model IEnumerable<CRUDADO.Models.ItemCore>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <script src="~/scripts/jquery-1.10.2.min.js"></script>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <script src="~/scripts/bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#lblConfirmOrder').delay(5000).fadeOut('slow');
            $.ajax({
                url: "/Restau/GetUser",
                type: "GET",
                asynch: false,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (Result) {
                    $.each(Result, function (key, value) {
                        $("#optionUser").append($("<option></option>").val(value.UserID).html(value.UserName));
                    });
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
            $.ajax({
                url: "/Restau/GetItem",
                type: "GET",
                asynch: false,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (Result) {
                    $.each(Result, function (key, value) {
                        $("#optionItem").append($("<option></option>").val(value.ItemId).html(value.ItemName));
                    });
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
            $("#SaveItem").click(function () {
                var InputValue = new Object();
                InputValue.ItemName = $("#optionItem option:selected").text();
                $.ajax({
                    url: "/Restau/PostItem",
                    type: "POST",
                    data: JSON.stringify(InputValue),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (Result) {
                        if (Result == "OK") {
                            setTimeout(function () {
                                location.reload();
                            }, 100);
                        }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });
            $("#txtCoupon").blur(function () {
                var InputValue = new Object();
                InputValue.txtCoupon = $("#txtCoupon").val();
                InputValue.TotalAmmount = parseInt(@ViewBag.Total)
                if ($("#txtCoupon").val() != null && $("#txtCoupon").val() != "" && $("#txtCoupon").val() != undefined) {
                    $.ajax({
                        url: "/Restau/ValidateCoupon",
                        type: "POST",
                        data: JSON.stringify(InputValue),
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        success: function (Result) {
                            if (Result == "OK") {
                                $("#lblCoupon").removeClass("red").addClass("green").text("Valid Coupon");
                            }
                            else {
                                $("#lblCoupon").removeClass("green").addClass("red").text("Invalid Coupon");
                            }
                        },
                        error: function (response) {
                            alert(response.responseText);
                        }
                    });
                }
                else {
                    if($("#txtCoupon").val() == null || $("#txtCoupon").val() == "" || $("#txtCoupon").val() == undefined) {
                        $("#lblCoupon").text(" ");
                    }
                }
            });            
            $("#PlaceOrder").click(function () {
                var InputValue = new Object();
                InputValue.UserID = $("#optionUser option:selected").val();
                InputValue.TotalAmmount = parseInt(@ViewBag.Total);
                InputValue.WithGST = parseInt(@ViewBag.IncludeGST);
                InputValue.Coupon = $("#txtCoupon").val();
                $.ajax({
                    url: "/Restau/PlaceOrder",
                    type: "POST",
                    data: JSON.stringify(InputValue),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (Result) {
                        if (Result == "OK") {
                            $("#lblConfirmOrder").text("Please Take Rest...You will get your order after 30 min.")
                        }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });
            $('#txtCoupon').keydown(function () {
                if ($("#txtCoupon").val() == null || $("#txtCoupon").val() == "" || $("#txtCoupon").val() == undefined) {
                    $("#lblCoupon").text(" ");
                }
            });
        });        
    </script>
    <style>
        .red {
            color: red;
        }

        .green {
            color: green;
        }
    </style>
</head>
<body>
    <div class="container" style="padding-top:50px;">
        <label id="lblConfirmOrder" style="color:orangered;"></label>
        <div class="row col-md-4">
            <table class="table" border="1">
                <tr>
                    <td>Select User : </td>
                    <td><select id="optionUser" class="form-control dropdown"></select></td>
                </tr>
                <tr>
                    <td>Select Item : </td>
                    <td><select id="optionItem" class="form-control dropdown"></select></td>
                </tr>
                <tr>
                    <td colspan="2">
                        <input type="button" id="SaveItem" class="btn btn-danger" value="Save Item" />
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="col-md-6">
        <table class="table" border="1">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ItemName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Qty)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Total)
                </th>
                <th>
                    Action
                </th>
            </tr>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Qty)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Total)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", "Restau", null, new { @class = "btn btn-info" /* id=item.PrimaryKey */ }) |
                        @Html.ActionLink("Delete", "Delete", "Restau", null, new { @class = "btn btn-info" /* id=item.PrimaryKey */ })
                    </td>
                </tr>
            }
        </table>
        <p>Enter Coupon : <input type="text" id="txtCoupon" value="" placeholder="Optional..." /></p>
        <label id="lblCoupon"></label>
        <h4 style="text-align:right;">
            Sub Total ==> @ViewBag.Total
        </h4>
        <h4 style="color:green;text-align:right;">
            Including GST ==> @ViewBag.IncludeGST
        </h4>
        <input type="button" id="PlaceOrder" value="Take Home Delivery" class="btn btn-info" />
    </div>
</body>
</html>

Repository Class:
using CRUDADO.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace CRUDADO
{
    public class RestaurantRepository
    {
        public SqlConnection con;
        public void connection()
        {
            string cnstr;
            cnstr = ConfigurationManager.ConnectionStrings["Restaurant"].ToString();
            con = new SqlConnection(cnstr);
        }
        public List<User> GetAllUser()
        {
            connection();
            SqlCommand cmd = new SqlCommand("spUserItem", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Action", "User");
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            List<User> UserList = new List<User>();
            con.Open();
            da.Fill(dt);
            con.Close();
            foreach (DataRow dr in dt.Rows)
            {
                UserList.Add(
                    new User
                    {
                        UserID = Convert.ToInt32(dr["UserId"]),
                        UserName= Convert.ToString(dr["UserName"])                        
                    });
            }
            return UserList;
        }
        public List<Item> GetAllItem()
        {
            connection();
            SqlCommand cmd = new SqlCommand("spUserItem", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Action", "Item");
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            List<Item> ItemList = new List<Item>();
            con.Open();
            da.Fill(dt);
            con.Close();
            foreach (DataRow dr in dt.Rows)
            {
                ItemList.Add(
                    new Item
                    {
                        ItemId = Convert.ToInt32(dr["ItemId"]),
                        ItemName = Convert.ToString(dr["ItemName"])
                    });
            }
            return ItemList;
        }
        public bool AddItem(string ItemName)
        {
            connection();
            SqlCommand cmd = new SqlCommand("spItemInsertUpdate", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@ItemName", ItemName);            
            cmd.Parameters.AddWithValue("@Action", "InsertUpdate");
            con.Open();
            int a = cmd.ExecuteNonQuery();
            con.Close();
            if (a >= 1)
                return true;
            else
                return false;
        }
        public List<ItemCore> GetItem()
        {
            connection();
            SqlCommand cmd = new SqlCommand("spItemInsertUpdate", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;            
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            List<ItemCore> ItemList = new List<ItemCore>();
            con.Open();
            da.Fill(dt);
            con.Close();
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    ItemList.Add(
                        new ItemCore
                        {
                            ItemId = Convert.ToInt32(dr["Id"]),
                            ItemName = Convert.ToString(dr["ItemName"]),
                            Price = Convert.ToInt32(dr["Price"]),
                            Qty = Convert.ToInt32(dr["Qty"]),
                            Total = Convert.ToInt32(dr["Total"])
                        });
                }
            }
            return ItemList;
        }
        public bool PlaceOrder(int UserId, int TotalAmmount, int WithGST, string Coupon)
        {
            connection();
            SqlCommand cmd = new SqlCommand("spOrder", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@UserId", UserId);
            cmd.Parameters.AddWithValue("@Ammount", TotalAmmount);
            cmd.Parameters.AddWithValue("@AmmountWithGST", WithGST);
            cmd.Parameters.AddWithValue("@Coupon", Coupon);                        
            con.Open();
            int a = cmd.ExecuteNonQuery();
            con.Close();
            if (a >= 1)
                return true;
            else
                return false;
        }
        public bool IsValidCoupon(string txtCoupon,int TotalAmmount)
        {
            string isValid = string.Empty;
            connection();
            SqlCommand cmd = new SqlCommand("spISCouponValid", con);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Coupon", txtCoupon);
            cmd.Parameters.AddWithValue("@TotalAmmount", TotalAmmount);
            cmd.Parameters.Add("@IsValid", SqlDbType.Char, 500);
            cmd.Parameters["@IsValid"].Direction = ParameterDirection.Output;
            con.Open();
            int a = cmd.ExecuteNonQuery();
            isValid = ((string)cmd.Parameters["@IsValid"].Value).Trim();
            con.Close();
            if (isValid == "True")
                return true;
            else
                return false;
        }
    }
}
	
Stored Procedure:
1)USE [TestDB]
GO
/****** Object:  StoredProcedure [dbo].[spUserItem]    Script Date: 11/15/2018 7:10:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spUserItem]
	@Action varchar(20) = ''
AS
BEGIN	
	SET NOCOUNT ON;
	IF @Action = 'User'
	BEGIN
		Select UserId,UserName from UserMaster
	END
	IF @Action = 'Item'
	BEGIN
		Select ItemId,ItemName from ItemMaster
	END
END
	
2)USE [TestDB]
GO
/****** Object:  StoredProcedure [dbo].[spItemInsertUpdate]    Script Date: 11/15/2018 7:11:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spItemInsertUpdate]
(
	@ItemName varchar(50) = '',
	@Action varchar(50) = ''
)
AS	
BEGIN	
	SET NOCOUNT OFF;
	IF @Action = 'InsertUpdate'
		BEGIN
		Declare @Price as int
		select @Price = ItemPrice from ItemMaster where ItemName = @ItemName
		IF EXISTS(select 1 from tblItem where ItemName = @ItemName)
									BEGIN
			Declare @Qty as int=0,@Total int=0			
			select @Qty = Qty, @Total=Total from tblItem where ItemName = @ItemName
			SET @Qty = @Qty + 1
			SET @Total = @Total + @Price
			UPDATE tblItem set Qty = @Qty, Total = @Total where ItemName = @ItemName
		END
		ELSE
			BEGIN														
				Insert into tblItem(ItemName,Qty,Price,Total) Values(@ItemName,1,@Price,@Price)
			END
		END
	ELSE
		BEGIN
			select * from tblItem
		END
END
  
3)USE [TestDB]
GO
/****** Object:  StoredProcedure [dbo].[spOrder]    Script Date: 11/15/2018 7:11:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spOrder]
(
	@UserId int = null,
	@Ammount int = null,
	@AmmountWithGST int = null,
	@Coupon varchar(50) = ''
)	
AS
BEGIN
	SET NOCOUNT OFF;
	declare @tempCoupon as int 
	select @tempCoupon = Cid from Coupon where CopanName = @Coupon
	Insert into [Order](UserId,Ammount,AmmountWithGST,CouponId) values(@UserId,@Ammount,@AmmountWithGST,@tempCoupon)
END

4)USE [TestDB]
GO
/****** Object:  StoredProcedure [dbo].[spISCouponValid]    Script Date: 11/15/2018 7:11:49 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spISCouponValid]
	@Coupon varchar(100) = '',
	@TotalAmmount int = null,
	@IsValid varchar(10) out
AS
BEGIN
	SET NOCOUNT ON;
	declare @StartDate datetime,@EndDate datetime,@Ammount as int	
	SET @IsValid = 'False'
	IF EXISTS(select 1 from Coupon where CopanName = @Coupon)
	BEGIN
		select @StartDate = StartDate, @EndDate = EndDate from Coupon where CopanName = @Coupon
			if @StartDate <= GETDATE() AND @EndDate >= GETDATE()
				begin
				select @Ammount = OnAmmount from Coupon where CopanName = @Coupon				
					if @TotalAmmount >= @Ammount
						begin
							 SET @IsValid = 'True'
						end
				end
	END
	ELSE
	BEGIN
		SET @IsValid = 'False'
	END	
END





          
         
              

